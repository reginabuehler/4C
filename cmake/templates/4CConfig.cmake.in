@PACKAGE_INIT@

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/modules ${CMAKE_MODULE_PATH})

include(CMakeFindDependencyMacro)
include(FetchContent)

set(FOUR_C_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@")
set(FOUR_C_BINARY_DIR "@CMAKE_INSTALL_PREFIX@/bin")
set(FOUR_C_EXECUTABLE_NAME "@FOUR_C_EXECUTABLE_NAME@")
set(FOUR_C_LIBRARY_NAME "@FOUR_C_LIBRARY_NAME@")
set(FOUR_C_INCLUDE_DIR "@CMAKE_INSTALL_PREFIX@/include")
set(FOUR_C_LIBRARY_DIR "@CMAKE_INSTALL_PREFIX@/lib")

@FOUR_C_ACTIVATED_DEPENDENCIES_CONFIG@

if(FOUR_C_WITH_MPI)
  find_package(MPI REQUIRED)
endif()

if(FOUR_C_WITH_TRILINOS)
  find_package(Trilinos REQUIRED)
endif()

if(FOUR_C_WITH_DEAL_II)
  find_package(deal.II REQUIRED CONFIG HINTS ${FOUR_C_DEAL_II_ROOT})
endif()

if(FOUR_C_WITH_BOOST)
  find_package(
    Boost
    COMPONENTS graph system
    REQUIRED
    )
endif()

if(FOUR_C_WITH_BACKTRACE)
  find_package(Backtrace REQUIRED)
endif()

if(FOUR_C_WITH_HDF5)
  find_package(
    HDF5
    COMPONENTS C HL
    REQUIRED
    )
endif()

if(FOUR_C_WITH_ZLIB)
  find_package(ZLIB REQUIRED)
endif()

if(FOUR_C_WITH_QHULL)
  find_package(Qhull REQUIRED)
endif()

if(FOUR_C_WITH_FFTW)
  find_package(FFTW REQUIRED)
endif()

if(FOUR_C_WITH_CLN)
  find_package(CLN REQUIRED)
endif()

if(FOUR_C_WITH_MIRCO)
  find_package(mirco_lib CONFIG HINTS ${FOUR_C_MIRCO_ROOT})
endif()

if(FOUR_C_WITH_ARBORX)
  find_package(ArborX CONFIG HINTS ${FOUR_C_ARBORX_ROOT})
endif()

if(FOUR_C_WITH_RYML)
  find_package(ryml CONFIG HINTS ${FOUR_C_RYML_ROOT})
endif()

if(FOUR_C_WITH_MAGIC_ENUM)
  find_package(magic_enum CONFIG HINTS ${FOUR_C_MAGIC_ENUM_ROOT})
endif()

if(FOUR_C_WITH_PYBIND11)
  find_package(pybind11 CONFIG HINTS ${FOUR_C_PYBIND11_ROOT})
endif()

include("${CMAKE_CURRENT_LIST_DIR}/4CTargets.cmake")
check_required_components(4C)

# extract all the library directory to FOUR_C_LIBRARY_PATH. This can be appended to
# LD_LIBRARY_PATH for system to search for dependent shared libraries

string(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UPPER)
set(IMPORTED_LOCATION_STRING "IMPORTED_LOCATION_${CMAKE_BUILD_TYPE_UPPER}")
get_target_property(FOUR_C_LIBRARY 4C::lib4C ${IMPORTED_LOCATION_STRING})
get_filename_component(FOUR_C_LIBRARY_PATH "${FOUR_C_LIBRARY}" DIRECTORY)

get_target_property(
  FOUR_C_LINKED_LIBS 4C::four_c_all_enabled_external_dependencies INTERFACE_LINK_LIBRARIES
  )
message(
  STATUS "Linked libraries for 4C::four_c_all_enabled_external_dependencies: ${FOUR_C_LINKED_LIBS}"
  )

foreach(LINKED_LIB ${FOUR_C_LINKED_LIBS})
  # Check if the linked item is a target (i.e., defined in the project or imported)
  if(TARGET ${LINKED_LIB})
    # Try to get the library path (for imported or non-interface targets)
    get_target_property(LIB_PATH ${LINKED_LIB} IMPORTED_LOCATION)
    if(NOT LIB_PATH)
      get_target_property(LIB_PATH ${LINKED_LIB} LOCATION)
    endif()

    # Extract the directory if a path was found
    if(LIB_PATH)
      get_filename_component(LIB_DIR "${LIB_PATH}" DIRECTORY)
      message(STATUS "Directory for ${LINKED_LIB}: ${LIB_DIR}")
      list(APPEND FOUR_C_LIBRARY_PATH "${LIB_DIR}")
    else()
      message(
        STATUS "${LINKED_LIB} does not have a physical location (might be an interface target)."
        )
    endif()
  else()
    message(STATUS "${LINKED_LIB} is not a target (possibly a system library or not found).")
  endif()
endforeach()

# write environment variables to a setvars file. This can be source'd in the terminal to avoid setting LD_LIBRARY_PATH manually
# in the case the runtime path is not set properly. This is likely not the case because we tell cmake to relink the runtime path
# for installation via CMAKE_INSTALL_RPATH. An example usage is
# . ./4Csetvars.sh; ./a.out
list(JOIN FOUR_C_LIBRARY_PATH ";" FOUR_C_LIBRARY_PATH_STRING)
string(REPLACE ";" ":" FOUR_C_LIBRARY_PATH_STRING "${FOUR_C_LIBRARY_PATH_STRING}")
file(
  WRITE "${CMAKE_CURRENT_BINARY_DIR}/4Csetvars.sh"
  "export LD_LIBRARY_PATH=${FOUR_C_LIBRARY_PATH_STRING}:$LD_LIBRARY_PATH"
  )
