{% set tutorial_file = "tutorial_fsi_2d.4C.yaml" %}
{% set input_file_content = load_input_file(tutorial_file) %}

.. _2d_fsitutorial:

FSI Tutorial 2D
==============================================

Introduction
------------

We consider a 2d driven cavity example as sketched in Fig.
:ref:`1.1 <tut_fsi_preexo_2d:1.1>`.
For further details and references we refer the reader to [Wall99]_

.. figure:: /_assets/Angabeskizze.jpg
   :alt: The driven cavity example in 2d
   :name: tut_fsi_preexo_2d:1.1

   The driven cavity example in 2d

You can find the complete journal in `tests/tutorials/tutorial_fsi.jou`.

Within Cubit, open the Journal-Editor (*Tools*\ :math:`\to`\ *Journal
Editor*), paste the text from the journal file and press *play*.

Export the created geometry and mesh to an EXODUS file via
*File*\ :math:`\to`\ *Export...*. During export, set the dimension
explicitly to 2D.


The FSI problem with a partitioned solver
-------------------------------------------

Here, we create the |FOURC| input file for the FSI problem, that is solved
using a partitioned scheme, which means that the fluid and the solid problem are solved sequentially.
For a monolithic scheme, see :ref:`the section below<tut_fsi_preexo_2d:monolithic>`.

Geometry description
~~~~~~~~~~~~~~~~~~~~

The geometry is described in the file `tutorial_fsi_2d.e` we created before. It contains two element
blocks for the fluid and the structure domain, respectively. We reference this file in the input
file and assign the correct element types and material properties to the blocks:

{{ section_dump(input_file_content, ["STRUCTURE GEOMETRY", "FLUID GEOMETRY", "MATERIALS"]) }}

General parameters
~~~~~~~~~~~~~~~~~~

We set the following parameters in the input file:

{{ section_dump(input_file_content, ["PROBLEM TYPE", "ALE DYNAMIC", "FLUID DYNAMIC", "STRUCTURAL DYNAMIC", "FSI DYNAMIC", "SOLVER 1", "SOLVER 2", "SOLVER 3"]) }}

We define the domain of the ALE problem as a clone of the fluid domain and assign a material:

{{ section_dump(input_file_content, ["CLONING MATERIAL MAP"]) }}

-  ``FUNCT 1``

   insert ``SYMBOLIC_FUNCTION_OF_SPACE_TIME (1-cos(2*t*pi/5))``
   defining time-dependent inflow and lid movement

-  ``FUNCT 2``

   insert ``SYMBOLIC_FUNCTION_OF_SPACE_TIME 10*(y-1)*(1-cos(2*t*pi/5))``
   representing the spatial inflow distribution

Safe the file under a different name, e.g. ’dc2d_fsi.head’.

Boundary conditions
~~~~~~~~~~~~~~~~~~~

The boundary conditions are set as follows:

- Dirichlet boundary conditions for structure, fluid and ALE:

{{ section_dump(input_file_content, ["DESIGN LINE DIRICH CONDITIONS", "DESIGN POINT DIRICH CONDITIONS", "DESIGN LINE ALE DIRICH CONDITIONS", "DESIGN POINT ALE DIRICH CONDITIONS"]) }}

- FSI coupling conditions:

{{ section_dump(input_file_content, ["DESIGN FSI COUPLING LINE CONDITIONS"]) }}


Running the Simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run in a shell

::

    ./4C <input_file_name> <output_directory>/output_prefix

.. _`tut_fsi_preexo_2d:postprocess`:

Postprocessing
--------------

.. admonition:: Warning

   The procedure described here is likely outdated and needs to be update by the output
   taskforce!

You can postprocess your results with any visualization software you
like. In this tutorial, we choose *Paraview*.

Before you can open the results, you have to generate a filter again.
Call *make post_drt_ensight* in the |FOURC|-directory. Filter your results
in the output directory with the call

.. container:: center

   ``./post_drt_ensight --file=[outputdirectory]/outputprefix``

After this open *paraview*, go to

-  *File\ :math:`\to`\ Open Data* and select the filtered *\*.case
   file*.

-  Only for older versions of *Paraview*:

   -  Select the time step in the *Select Time Value* window on the left
      and

   -  shift *Byte order* to *little endian*

-  Click on *accept* (or *apply*) to activate the display.

-  In the *Display tab* (section *Color*) you can choose now between
   *Point pressure* and *Point velocity*, whatever you want to display.

-  Use a *warp vector* to visualize the simulation results on the
   deformed domain.

-  For the scale, activate the *Scalar bar* button in the *View
   section*.

.. _`tut_fsi_preexo_2d:monolithic`:

The FSI problem with a monolithic solver
----------------------------------------

There are two possibilities for monolithic schemes:

-  fluid-split: the fluid field is chosen as slave field, the structure
   field is chosen as master field.

-  structure-split: the structure field is chosen as slave field, the
   fluid field is chosen as master field.

In order to use a monolithic solver, change the coupling algorithm
``COUPALGO`` in the ``FSI DYNAMIC`` section in the \*.head-file.
Additionally, special care has to be taken of the interface degrees of
freedom, that are subject to Dirichlet boundary conditions. The
interface is always governed by the master field. The slave interface
degrees of freedom do not occur in the global system of equations and,
thus, are not allowed to carry Dirichlet boundary conditions.

Tolerances for the nonlinear convergence check in monolithic FSI are set
with the following parameters in the ``FSI DYNAMIC`` section:

.. container:: center

   | ``TOL_DIS_INC_INF``
   | ``TOL_DIS_INC_L2``
   | ``TOL_DIS_RES_INF``
   | ``TOL_DIS_RES_L2``
   | ``TOL_FSI_INC_INF``
   | ``TOL_FSI_INC_L2``
   | ``TOL_FSI_RES_INF``
   | ``TOL_FSI_RES_L2``
   | ``TOL_PRE_INC_INF``
   | ``TOL_PRE_INC_L2``
   | ``TOL_PRE_RES_INF``
   | ``TOL_RPE_RES_L2``
   | ``TOL_VEL_INC_INF``
   | ``TOL_VEL_INC_L2``
   | ``TOL_VEL_RES_INF``
   | ``TOL_VEL_RES_L2``

Fluid split
~~~~~~~~~~~

-  Choose ``iter_monolithicfluidsplit`` as ``COUPALGO`` in the
   ``FSI DYNAMIC`` section.

-  Remove the Dirichlet condition on node set 12
   in order to remove the Dirichlet boundary conditions from the fluid
   (=slave) interface degrees of freedom.

Create the input file as described above. Start |FOURC| as usual.

Structure split
~~~~~~~~~~~~~~~

-  Choose ``iter_monolithicstructuresplit`` as ``COUPALGO`` in the
   ``FSI DYNAMIC`` section.

-  Remove the Dirichlet condition on node set 4
   in order to remove the Dirichlet boundary conditions from the
   structure (=slave) interface degrees of freedom.

Start |FOURC| as usual.
