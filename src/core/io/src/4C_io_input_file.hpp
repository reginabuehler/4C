// This file is part of 4C multiphysics licensed under the
// GNU Lesser General Public License v3.0 or later.
//
// See the LICENSE.md file in the top-level for license information.
//
// SPDX-License-Identifier: LGPL-3.0-or-later

#ifndef FOUR_C_IO_INPUT_FILE_HPP
#define FOUR_C_IO_INPUT_FILE_HPP

#include "4C_config.hpp"

#include "4C_comm_mpi_utils.hpp"
#include "4C_io_input_parameter_container.hpp"
#include "4C_io_yaml.hpp"

#include <filesystem>
#include <map>
#include <memory>
#include <ranges>
#include <string>

FOUR_C_NAMESPACE_OPEN

namespace Core::IO
{
  class YamlNodeRef;
  class InputSpec;

  namespace Internal
  {
    class InputFileImpl;
    class InputFileFragmentImpl;
  }  // namespace Internal

  /**
   * This class encapsulates input files independent of their format.
   *
   * Objects of this class read the content of a file and grant access to it. The input is not
   * yet interpreted in any way. Input files contain different sections. The content can be matched
   * against an expected InputSpec via match_section() to extract meaningful data.
   *
   * Sections may appear in an arbitrary order and each section name must be unique. An exception is
   * the special section named "INCLUDES" which can contain a list of other files that should be
   * read in addition to the current file.
   *
   * Two file formats are supported:  the standard .yaml (or .yml) and .json formats. The format of
   * a file is detected based on its ending. Included files do not have to use the same format as
   * the including file.
   *
   * @note The file is only read on rank 0 to save memory. All sections are broadcast to all other
   * ranks, except for the legacy sections (see the constructor). Legacy sections need to be
   * consumed on rank 0 with the help of in_section_rank_0_only().
   */
  class InputFile
  {
   public:
    //! Name of the special section that can contain arbitrary data.
    static constexpr auto description_section_name = "TITLE";

    //! Name of the special section that can contain a list of files to include.
    static constexpr auto includes_section_name = "INCLUDES";

    //! Name of the special key under which the input file version is stored.
    static constexpr auto input_version_key = "input_version";

    /**
     * A Fragment is a part of the input file. Fragments are used to store the content of a section.
     * and are used to match() against an InputSpec. Instead of using a concrete data type, the
     * Fragment class encapsulates details of the input file format and provides a few methods to
     * interact with the content. A Fragment is a lightweight object that can be copied and passed
     * around by value. The associated InputFile must outlive any of its fragments.
     */
    class Fragment
    {
     public:
      /**
       * Return the content of the fragment as a string formatted in the .dat style. You need to
       * manually parse this string. Depending on the format of the input file, this might be rather
       * inefficient, since you convert a differently structured format into a one-liner string,
       * just to reparse it later.
       *
       * @deprecated Do not use this function in new code. Say what you expect with an InputSpec and
       * use the match() function instead.
       */
      [[nodiscard]] std::string_view get_as_dat_style_string() const;

      /**
       * A raw pointer to implementation details. This pointer will be valid as long as the
       * associated InputFile object is alive.
       *
       * @note Can be public since you cannot do anything useful with this opaque pointer.
       */
      Internal::InputFileFragmentImpl* pimpl_;
    };

    /**
     * Iterator over the Fragments making up a section.
     */
    using FragmentIterator = std::vector<Fragment>::const_iterator;

    /**
     * A range of FragmentIterators.
     */
    using FragmentIteratorRange = std::ranges::subrange<FragmentIterator>;

    /**
     * Construct an InputFile that understands the given @p valid_sections. These sections can
     * be fully validated based on their InputSpec. The @p legacy_section_names are also accepted as
     * valid section names but the section content cannot be validated. We implicitly assume a list
     * of strings as valid input for these sections. Additionally, the following special keys
     * are always accepted:
     *
     * - "INCLUDES" which contains a list of files to include.
     * - "TITLE" which may contain anything. This section is not validated in any way. In contrast
     *   to a comment, this section is useful to store arbitrary data, e.g. generated by a script,
     *   which can be emitted again.
     * - "input_version" which contains the version of the input file itself.
     *
     * Since reading and distributing input is a collective operation, an MPI communicator @p comm
     * is required.
     */
    InputFile(std::map<std::string, InputSpec> valid_sections,
        std::vector<std::string> legacy_section_names, MPI_Comm comm);


    /**
     * Destructor.
     */
    ~InputFile();

    /**
     * Copy constructor is deleted. InputFile can contain large amounts of data and copying it
     * is almost certainly not what you want.
     */
    InputFile(const InputFile&) = delete;

    /**
     * Copy assignment is deleted. InputFile can contain large amounts of data and copying it is
     * almost certainly not what you want.
     */
    InputFile& operator=(const InputFile&) = delete;

    /**
     * Move constructor.
     */
    InputFile(InputFile&&) noexcept = default;

    /**
     * Move assignment.
     */
    InputFile& operator=(InputFile&&) noexcept = default;

    /**
     * Read the content of the input file. The file is read on rank 0 and distributed to all
     * other ranks if necessary. The file format is detected based on the file ending.
     */
    void read(const std::filesystem::path& top_level_file);

    /**
     * Get the (absolute) file path of the input file that contained a section. If the section
     * is unknown or was not read from any file, an empty path is returned.
     */
    [[nodiscard]] std::filesystem::path file_for_section(const std::string& section_name) const;


    /**
     * Returns the lines in a section on rank 0 and returns an empty range on all other ranks. This
     * only works for legacy sections.
     */
    [[nodiscard]] FragmentIteratorRange in_section_rank_0_only(
        const std::string& section_name) const;

    /**
     * Match a whole section named @p section_name against the input file content. The results
     * are stored in the @p container. If the section is not known, an exception is thrown. Note
     * that you do not need to pass an InputSpec to this function, since the InputFile object
     * already knows about the expected format of the section. Nevertheless, this function only
     * makes sense for sections with a known InputSpec. Legacy string sections cannot use this
     * function and must be processed with in_section_rank_0_only().
     */
    void match_section(const std::string& section_name, InputParameterContainer& container) const;

    /**
     * Returns true if the input file contains a section with the given name.
     */
    [[nodiscard]] bool has_section(const std::string& section_name) const;

    /**
     * Access MPI communicator associated with this object.
     */
    [[nodiscard]] MPI_Comm get_comm() const;

    /**
     * Emit metadata about the input file to the given @p node in a YAML tree. The metadata
     * contains information about all sections and parameters that are known to this object. The
     * metadata information can be useful for additional tools that generate schema files or
     * documentation.
     */
    void emit_metadata(YamlNodeRef node) const;

    /**
     * Write the content of the input file to the given output stream @p out. The content is
     * written in .yaml format. The optional @p file_name is used to construct correct relative
     * paths for all path parameters.
     *
     * @note You probably only want to call this function on rank 0.
     */
    void write_as_yaml(std::ostream& out, const std::filesystem::path& file_name = {}) const;

   private:
    std::unique_ptr<Internal::InputFileImpl> pimpl_;
  };
}  // namespace Core::IO

FOUR_C_NAMESPACE_CLOSE

#endif
